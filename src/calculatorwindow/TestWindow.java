/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calculatorwindow;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.Serializable;



/**
 *
 * @author Will_and_Sara
 */
public class TestWindow extends javax.swing.JFrame implements PropertyChangeListener,  Serializable{

    /**
     * Creates new form TestWindow
     */
    public TestWindow(){
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Expression");

        jLabel2.setText("result");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(199, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(65, 65, 65))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                TestWindow T;
                T = new TestWindow();
                
                //initialize the test data, it should be a series of column names, their output types, and some sample data (the first row of a dbf)
                String[] cols = {"A","B","C"};
                ParseTreeNodes.TypeEnum[] types = {ParseTreeNodes.TypeEnum.DOUBLE,ParseTreeNodes.TypeEnum.STRING,ParseTreeNodes.TypeEnum.BOOLEAN};
                Object[] SampleData = {2.0,"exhibit B",true};
                
                //create a function tree, this allows the user to see the available functions, quiery their help, and insert their syntax.
                FunctionTree FT = new FunctionTree();
                FT.setSize(200,160);//place this in a scroll container.
                FT.setLocation(200,0);
                
                //create a varable tree, this will show the user the availabe variables to include in their computation, currently it is simply the name of the column.  this can have the type added as a tooltip or something.
                VariableTree VT = new VariableTree(cols);
                VT.setSize(200,80);
                VT.setLocation(0,90);
                
                //create an expression window, the expression window does the work, it needs all of the initial data so that the expression can be tested for validity, and so that example output can be shown.
                ExpressionWindow EW = new ExpressionWindow(cols,types,SampleData);
                
                //this listener allows the calculator to show the expression and output if the designer so chooses.
                EW.addPropertyChangeListener(T);
                
                //This listener allows the function tree to insert syntax to the expression window.
                FT.addPropertyChangeListener(EW);
                
                //this listener allows the variable tree to insert column nmaes with the correct syntax into the expression window.
                VT.addPropertyChangeListener(EW);
                EW.setSize(200,80);
                T.getContentPane().add(EW);
                T.getContentPane().add(FT);
                T.getContentPane().add(VT);
                T.pack();
                T.setVisible(true);
            }
        });
    }
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        //System.out.println("Name      = " + evt.getPropertyName());
        //System.out.println("Old Value = " + evt.getOldValue());
        //System.out.println("New Value = " + evt.getNewValue());
        if("Tree".equals(evt.getPropertyName())){
            ParseTreeNodes.ParseTreeNode tree = (ParseTreeNodes.ParseTreeNode)evt.getNewValue();
            jLabel1.setText(tree.ToString());
            jLabel2.setText(tree.Evaluate().Result().toString());
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
